var I=Object.defineProperty;var $=(e,n,t)=>n in e?I(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t;var a=(e,n,t)=>($(e,typeof n!="symbol"?n+"":n,t),t);import{f as N,a as P}from"./2.1e08a865.js";import{B as K}from"./BlobReader.433f7ad9.js";class S{constructor(n,t,o,s){a(this,"viewer",null);a(this,"type",N.File);a(this,"name");a(this,"parent");a(this,"arciveFile");a(this,"options");a(this,"loadedBlob",null);this.arciveFile=n,this.options=t,this.name=o,this.parent=s}async blob(){if(this.loadedBlob!=null)return this.loadedBlob;const n=this.arciveFile.slice(this.options.offset,this.options.offset+this.options.length),t=this.options.preload!==void 0?new Blob([this.options.preload,n]):n;return this.loadedBlob=t,this.loadedBlob}async buffer(){return await(await this.blob()).arrayBuffer()}}const u=/(.+)_(dir|\d+).vpk/;async function x(e,n=!1){var g;let t,o,s,y={},h=[];if(u.test(e.name)){const c=e.parent;if(!c)throw new Error("VPK with multiple files MUST have parent.");const l=(g=e.name.match(u))==null?void 0:g[1];if(!l)throw new Error("VPK invalid name.");const d=await c.list();for(const[p,r]of Object.entries(d)){if(r.type!=N.File||!u.test(p))continue;const f=p.match(u);if(!f)continue;const k=f[1];if(!k||k!=l)continue;const v=f[2];if(v){if(v=="dir"){t=r.name,o=r.parent,s=await r.blob(),h.push(r);continue}else{const F=parseInt(v);if(!Number.isNaN(F)){y[F]=await r.blob(),h.push(r);continue}}throw new Error("Invalid archive ID")}}if(!s||!t||o===void 0)throw new Error("VPK unable to find dir.")}else t=e.name,o=e.parent,s=await e.blob(),h.push(e);const i=new K(s);await i.load(12),i.assertMagic(1437209140,"Uint32");const w=i.readNumber("Uint32"),B=i.readNumber("Uint32");if(w!=1)if(w==2)i.blobPointer+=16;else throw new Error(`Invalid VPK version. got: ${w}, expected 1 or 2.`);const V=i.blobPointer+B,E=new P.fsDirectory_Container(t,o);await i.load(B);let b,U,m;for(;b=i.readNullString();)for(;U=i.readNullString();)for(;m=i.readNullString();){i.readNumber("Uint32");const c=i.readNumber("Uint16"),l=i.readNumber("Uint16");let d=i.readNumber("Uint32");const p=i.readNumber("Uint32");i.assertMagic(65535,"Uint16"),l==32767&&(d+=V);const r=l==32767?s:y[l],f=new S(r,c==0?{offset:d,length:p}:{offset:d,length:p,preload:i.readBuffer(c)},`${m}.${b}`,null);await P.setDeep(E,`${U}/${m}.${b}`,f)}return{vpk:E,from:h}}const R={namespace:"source-engine.vpk",priority:2,transform:async e=>{if(e.type!=N.File)throw new Error("Tried to create vpk archive viewer with invalid entry type.");const n=await x(e),t=e.parent;if(t)for(const o of n.from)await t.set(o.name,null);return n.vpk}};export{R as default};
